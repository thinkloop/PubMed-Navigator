package com.pubmednavigator.model.fetch {	import com.thinkloop.flex4components.StringUtil;import flash.events.Event;import flash.events.EventDispatcher;import flash.events.IOErrorEvent;import flash.net.URLLoader;import flash.net.URLRequest;import flash.net.URLVariables;import mx.events.DynamicEvent;
public class FetchDelegate extends EventDispatcher {		public static const PUBMED_FETCH_RESULT:String = 'pubmedFetchResult';	public static const PUBMED_FETCH_ERROR:String = 'pubmedFetchError';		public var loader:URLLoader = new URLLoader();		public function FetchDelegate():void {		loader.addEventListener(Event.COMPLETE, onResponse);		loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			}		public function fetch(idList:String):void {		idList = StringUtil.trim(idList);				if (idList.length <= 0) {			return;		}				var httpURL:String = 'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&retmode=xml&rettype=abstract&id=' + idList;				var vars:URLVariables = new URLVariables();		vars.httpURL = httpURL;				var request:URLRequest = new URLRequest('proxy.cfm');		request.data = vars;trace('fetch delegate');		loader.load(request);	}	private function onResponse(event:Event):void {				var xmlString:String = event.target.data;				if (xmlString.length <= 0) {			return;		}				var finalArray:Array = [];		var xml:XML = XML(xmlString);		var articles:XMLList = xml.PubmedArticle.MedlineCitation;				for each (var x:XML in articles) {			var o:Object = { pmID : int(x.PMID.toString()), articleTitle : x.Article.ArticleTitle.toString(), journalTitle : x.Article.Journal.Title.toString(), year : int(x.Article.Journal.JournalIssue.PubDate.Year.toString()), abstract : x.Article.Abstract.AbstractText.toString() };			var authorsList:String = '';						for each (var x1:XML in x.Article.AuthorList.Author) {				authorsList += ', ' + x1.ForeName + ' ' + x1.LastName;			}						o.authors = authorsList.substr(2);			finalArray.push(o);		}				var e:DynamicEvent = new DynamicEvent(PUBMED_FETCH_RESULT);		e.pubmedResult = finalArray;		dispatchEvent(e);	}	private function onIOError(event:IOErrorEvent):void {trace('PubMedFetch Service Error');		var e:Event = new Event(PUBMED_FETCH_ERROR);		dispatchEvent(e);			}}}